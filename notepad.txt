******************************
Call a function between scripts (both scripts have to be included to GameObjects).

using UnityEngine;
public class MainClass : MonoBehaviour 
{
	public static MainClass Instance;
	private string caption = "OK";
	
	void Start () 
	{
		Instance = this;
	}
	
	public void ShowMessage () 
	{
		Debug.Log(caption);
	}
}

using UnityEngine;
public class Execute : MonoBehaviour 
{
	void Update () 
	{
		if (Input.GetKeyDown("space"))
		{
			MainClass.Instance.ShowMessage();
		}
	}
}

******************************
Call a function between scripts (both scripts have to be included to GameObjects).

using UnityEngine;
public class MainClass : MonoBehaviour 
{
	private string caption = "OK";
	
	public void ShowMessage () 
	{
		Debug.Log(caption);
	}
}

using UnityEngine;
public class Execute : MonoBehaviour 
{
	public GameObject Core;
	
	void Update () 
	{
		if (Input.GetKeyDown("space"))
		{
			Core.GetComponent<MainClass>().ShowMessage();
		}
	}
}

******************************
Passing function as argument.

using UnityEngine;
public class delegates : MonoBehaviour 
{

	delegate void DelegateFunction();

	void WaitForSeconds(float S, DelegateFunction F)
	{
		if (Time.time>=S) F();
	}

	void Compute()
	{
		float x = 1.23f;
		for (int i=0;i<100000;i++)
		{
			x = Mathf.Sin(x) * Mathf.Sqrt(x);
		}
	}
	
	void Update () 
	{
		 WaitForSeconds(3, Compute);		
	}
}

******************************
Execute script in editor mode (call function by pressing button)

using UnityEngine;
public class PrintMessage : MonoBehaviour 
{
	public void PrintText()
	{
		Debug.Log("Hello World !");
	}
}

//Put script in Editor directory.
using UnityEngine;
using UnityEditor;
[CustomEditor(typeof(PrintMessage))]
public class PrintMessageEditor : Editor
{
	public override void OnInspectorGUI()
	{
		DrawDefaultInspector();    
		PrintMessage PM = (PrintMessage)target;
		if(GUILayout.Button("Print")) PM.PrintText();
	}
}

******************************
Transform hierarchy helper functions

void DisableChild (GameObject parent, string caption)
{
	Transform[] table = parent.GetComponentsInChildren<Transform>();
	for (int i=0;i<table.Length;i++)
	{
		if (table[i].name.Contains(caption)) table[i].gameObject.SetActive(false);   
	}
}
	
void ReplaceMesh (GameObject parent, string caption, Mesh input)
{
	Transform[] table = parent.GetComponentsInChildren<Transform>();
	for (int i=0;i<table.Length;i++)
	{
		if (table[i].name.Contains(caption)) table[i].gameObject.GetComponent<MeshFilter>().mesh = input;   
	}
}

void ReplaceMaterial (GameObject parent, string caption, Material input)
{
	Transform[] table = parent.GetComponentsInChildren<Transform>();
	for (int i=0;i<table.Length;i++)
	{
		if (table[i].name.Contains(caption)) table[i].gameObject.GetComponent<Renderer>().material = input;   
	}
}

******************************
Create a prefab.

using UnityEngine;
using UnityEditor;
public class MakePrefab : EditorWindow
{
	[MenuItem("Prefab/Make Prefab")]
	static void MakePrefabNow()
	{
		foreach (GameObject source in Selection.gameObjects)	
		{
			string path = "Assets/" + source.name + ".prefab";
			Object prefab = PrefabUtility.CreatePrefab(path, source);
			PrefabUtility.ReplacePrefab(source, prefab, ReplacePrefabOptions.ConnectToPrefab);			
		}
	}
}

******************************
Move object in the direction of camera.

using UnityEngine;
public class CameraDirection : MonoBehaviour 
{
	public Camera MC;
	public GameObject T;
	public float factor = 2.0f;
	
	void Update () 
	{
		if (Input.GetKey(KeyCode.I)) T.transform.position += MC.transform.forward * factor * Time.deltaTime;
		if (Input.GetKey(KeyCode.K)) T.transform.position -= MC.transform.forward * factor * Time.deltaTime;
		if (Input.GetKey(KeyCode.L)) T.transform.position += MC.transform.right * factor * Time.deltaTime;
		if (Input.GetKey(KeyCode.J)) T.transform.position -= MC.transform.right * factor * Time.deltaTime;
	}
}

******************************
Create bigger array from smaller ones.

int[,] MakeArray (int[,] A, int[,] B, int[,] C, int[,] D)
{
	int[,] E = new int[A.GetLength(0)*2,A.GetLength(1)*2];
	System.Array.Copy(A, 0, E, 0, A.Length);
	System.Array.Copy(B, 0, E, A.Length, B.Length);
	System.Array.Copy(C, 0, E, A.Length+B.Length, C.Length);
	System.Array.Copy(D, 0, E, A.Length+B.Length+C.Length, D.Length);
	return E;
}


******************************

// Function returns an array of all active loaded terrains and
// sorts them with their original hierarchy position.
Terrain[] LoadAndSortTerrains()
{
	Terrain[] foundObjects = FindObjectsOfType<Terrain>();
	Terrain[] sortedObjects = new Terrain[foundObjects.Length];
	for (int i=0; i<foundObjects.Length; i++)
	{
		int index = foundObjects[i].transform.GetSiblingIndex();
		sortedObjects[index] = foundObjects[i];
	}
	return sortedObjects;
}
